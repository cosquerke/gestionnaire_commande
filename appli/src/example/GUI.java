/**
 * Ce n'est qu'un exemple pour montrer comment lier des plugins à des boutons en swing. Tous les types sont dans le même fichier pour simplifier, les méthodes de chargement de plugins font semblant, ne sont pas paresseuses et ne sont pas au bon endroit.
 * 
 */
package example;

import java.awt.BorderLayout;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;

public class GUI {

	JFrame frame;
	String myData;
	private final JPanel buildersPluginsPanel;
	JTextArea poorDataRepresentation;

	public GUI() {
		frame = new JFrame("GUI moche");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLayout(new BorderLayout());
		JLabel titreLabel = new JLabel("Une zone");
		poorDataRepresentation = new JTextArea("Placeholder waiting for data", 10, 60);

		frame.getContentPane().add(BorderLayout.NORTH, titreLabel);
		frame.getContentPane().add(BorderLayout.CENTER, poorDataRepresentation);
		// A faire pour chaque catégorie de plugin dynamiquement activable, pas
		// forcément dans la même zone
		buildersPluginsPanel = new JPanel();
		frame.getContentPane().add(BorderLayout.SOUTH, buildersPluginsPanel);
		run();
		frame.pack();
		frame.setVisible(true);
	}

	public void run() {
		// A faire pour chaque catégorie de plugin dynamiquement activable
		createBuilderButtons();
	}

	private void createBuilderButtons() {
		for (DescrPlugin descr : getPluginsDescrFor(DataBuilder.class)) {
			JButton jb = new JButton(descr.name);
			jb.addActionListener(e -> poorDataRepresentation.setText(((DataBuilder) getPlugin(descr)).giveData()));
			buildersPluginsPanel.add(jb);
		}
	}

	private DataBuilder getPlugin(DescrPlugin descr) {
		// mock method. The true generic one should be in the Platform or Loader class
		// new objects are created at every call. This is bad
		if (descr.name.equals("builder 1"))
			return new DataBuild1();
		if (descr.name.equals("builder 2"))
			return new DataBuild2();

		return null;
	}

	private List<DescrPlugin> getPluginsDescrFor(Class<?> class1) {
		// mock method. The true generic one should be in the Platform or Loader class
		return List.of(new DescrPlugin("builder 1"), new DescrPlugin("builder 2"));
	}

	public static void main(String[] args) {
		new GUI();
	}

	private static class DescrPlugin {
		// I should not be here
		String name;

		public DescrPlugin(String name) {
			this.name = name;
		}

	}

	private static interface DataBuilder {
		String giveData();
	}

	private static class DataBuild1 implements DataBuilder {

		@Override
		public String giveData() {
			return "data generated by builder 1";
		}

	}

	private static class DataBuild2 implements DataBuilder {

		@Override
		public String giveData() {
			return "data generated by builder 2";
		}

	}

}
